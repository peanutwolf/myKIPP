
bin/Debug/UARTlibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000468  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800064  00800064  00000500  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004db  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e0  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050e  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ce  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034b  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000125e9  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
   2:	4f c0       	rjmp	.+158    	; 0xa2 <__bad_interrupt>
   4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
   6:	4d c0       	rjmp	.+154    	; 0xa2 <__bad_interrupt>
   8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
   a:	4b c0       	rjmp	.+150    	; 0xa2 <__bad_interrupt>
   c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
   e:	49 c0       	rjmp	.+146    	; 0xa2 <__bad_interrupt>
  10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
  12:	47 c0       	rjmp	.+142    	; 0xa2 <__bad_interrupt>
  14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
  16:	9c c0       	rjmp	.+312    	; 0x150 <__vector_11>
  18:	e5 c0       	rjmp	.+458    	; 0x1e4 <__vector_12>
  1a:	43 c0       	rjmp	.+134    	; 0xa2 <__bad_interrupt>
  1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
  1e:	41 c0       	rjmp	.+130    	; 0xa2 <__bad_interrupt>
  20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
  22:	3f c0       	rjmp	.+126    	; 0xa2 <__bad_interrupt>
  24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>

00000026 <ATcheck>:
  26:	41 54 00                                            AT.

00000029 <AT_OK>:
  29:	4f 4b 00                                            OK.

0000002c <__c.2174>:
  2c:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  3c:	3a 20 00                                            : .

0000003f <__c.2176>:
  3f:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  4f:	6f 72 3a 20 00                                      or: .

00000054 <__c.2178>:
  54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a0 e6       	ldi	r26, 0x60	; 96
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e8 e6       	ldi	r30, 0x68	; 104
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a4 36       	cpi	r26, 0x64	; 100
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a4 e6       	ldi	r26, 0x64	; 100
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	ae 3a       	cpi	r26, 0xAE	; 174
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	02 d0       	rcall	.+4      	; 0xa4 <main>
  a0:	e1 c1       	rjmp	.+962    	; 0x464 <_exit>

000000a2 <__bad_interrupt>:
  a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <main>:
unsigned char data;
uint8_t check_at_answ();


int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
     *  with the macro
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	d9 d0       	rcall	.+434    	; 0x266 <uart_init>

    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
  b4:	78 94       	sei


    /*
     * Transmit string from program memory to UART
     */
    uart_puts_p(ATcheck);
  b6:	86 e2       	ldi	r24, 0x26	; 38
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	81 d1       	rcall	.+770    	; 0x3be <uart_puts_p>
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x1c>
                data = *pnt;
               uart_puts((const char *)pnt);
            }

        }
    }
  be:	00 00       	nop
         * uart_getc() returns in the lower byte the received character and
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
  c0:	0b d1       	rcall	.+534    	; 0x2d8 <uart_getc>
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
        if ( c & UART_NO_DATA )
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 70       	andi	r24, 0x00	; 0
  cc:	91 70       	andi	r25, 0x01	; 1
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	b1 f7       	brne	.-20     	; 0xbe <main+0x1a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	9a 81       	ldd	r25, Y+2	; 0x02
  d6:	80 70       	andi	r24, 0x00	; 0
  d8:	90 71       	andi	r25, 0x10	; 16
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	19 f0       	breq	.+6      	; 0xe4 <main+0x40>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	6d d1       	rcall	.+730    	; 0x3be <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	80 70       	andi	r24, 0x00	; 0
  ea:	98 70       	andi	r25, 0x08	; 8
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	19 f0       	breq	.+6      	; 0xf6 <main+0x52>
                /*
                 * Overrun, a character already present in the UART UDR register was
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	64 d1       	rcall	.+712    	; 0x3be <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	80 70       	andi	r24, 0x00	; 0
  fc:	92 70       	andi	r25, 0x02	; 2
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	19 f0       	breq	.+6      	; 0x108 <main+0x64>
            {
                /*
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped
                 */
                uart_puts_P("Buffer overflow error: ");
 102:	84 e5       	ldi	r24, 0x54	; 84
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	5b d1       	rcall	.+694    	; 0x3be <uart_puts_p>
            }
            /*
             * send received character back
             */
            // UART_RxBuf[0]=0x30;
            if(strstr_P("OK", AT_OK)){
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	29 e2       	ldi	r18, 0x29	; 41
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	8e d1       	rcall	.+796    	; 0x430 <strstr_P>
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	99 f2       	breq	.-90     	; 0xbe <main+0x1a>
                pnt = get_UART_RxBuf();
 118:	7a d1       	rcall	.+756    	; 0x40e <get_UART_RxBuf>
 11a:	90 93 ad 00 	sts	0x00AD, r25
 11e:	80 93 ac 00 	sts	0x00AC, r24
                pnt++;
 122:	80 91 ac 00 	lds	r24, 0x00AC
 126:	90 91 ad 00 	lds	r25, 0x00AD
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 ad 00 	sts	0x00AD, r25
 130:	80 93 ac 00 	sts	0x00AC, r24
                data = *pnt;
 134:	80 91 ac 00 	lds	r24, 0x00AC
 138:	90 91 ad 00 	lds	r25, 0x00AD
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	80 93 ab 00 	sts	0x00AB, r24
               uart_puts((const char *)pnt);
 144:	80 91 ac 00 	lds	r24, 0x00AC
 148:	90 91 ad 00 	lds	r25, 0x00AD
 14c:	19 d1       	rcall	.+562    	; 0x380 <uart_puts>
            }

        }
    }
 14e:	b7 cf       	rjmp	.-146    	; 0xbe <main+0x1a>

00000150 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <__vector_11+0x1a>
 16a:	00 d0       	rcall	.+0      	; 0x16c <__vector_11+0x1c>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 170:	8b e2       	ldi	r24, 0x2B	; 43
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
 17a:	8c e2       	ldi	r24, 0x2C	; 44
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	8b 83       	std	Y+3, r24	; 0x03

    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	88 71       	andi	r24, 0x18	; 24
 188:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 18a:	80 91 a8 00 	lds	r24, 0x00A8
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	8f 71       	andi	r24, 0x1F	; 31
 192:	8c 83       	std	Y+4, r24	; 0x04

    if ( tmphead == UART_RxTail ) {
 194:	80 91 a9 00 	lds	r24, 0x00A9
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	98 17       	cp	r25, r24
 19c:	19 f4       	brne	.+6      	; 0x1a4 <__vector_11+0x54>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <__vector_11+0x6a>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	80 93 a8 00 	sts	0x00A8, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8a 57       	subi	r24, 0x7A	; 122
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	2b 81       	ldd	r18, Y+3	; 0x03
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
    }
    UART_LastRxError |= lastRxError;
 1ba:	90 91 aa 00 	lds	r25, 0x00AA
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	89 2b       	or	r24, r25
 1c2:	80 93 aa 00 	sts	0x00AA, r24
}
 1c6:	24 96       	adiw	r28, 0x04	; 4
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	0f 92       	push	r0
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
 204:	90 91 a6 00 	lds	r25, 0x00A6
 208:	80 91 a7 00 	lds	r24, 0x00A7
 20c:	98 17       	cp	r25, r24
 20e:	a1 f0       	breq	.+40     	; 0x238 <__vector_12+0x54>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 210:	80 91 a7 00 	lds	r24, 0x00A7
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	8f 71       	andi	r24, 0x1F	; 31
 218:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	80 93 a7 00 	sts	0x00A7, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 220:	8c e2       	ldi	r24, 0x2C	; 44
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	29 81       	ldd	r18, Y+1	; 0x01
 226:	22 2f       	mov	r18, r18
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	2a 59       	subi	r18, 0x9A	; 154
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	09 c0       	rjmp	.+18     	; 0x24a <__vector_12+0x66>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 238:	8a e2       	ldi	r24, 0x2A	; 42
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2a e2       	ldi	r18, 0x2A	; 42
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	2f 7d       	andi	r18, 0xDF	; 223
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
    }
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <uart_init+0x6>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
 274:	10 92 a6 00 	sts	0x00A6, r1
    UART_TxTail = 0;
 278:	10 92 a7 00 	sts	0x00A7, r1
    UART_RxHead = 0;
 27c:	10 92 a8 00 	sts	0x00A8, r1
    UART_RxTail = 0;
 280:	10 92 a9 00 	sts	0x00A9, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	99 23       	and	r25, r25
 28a:	54 f4       	brge	.+20     	; 0x2a0 <uart_init+0x3a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed
 28c:	8b e2       	ldi	r24, 0x2B	; 43
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
    	 baudrate &= ~0x8000;
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	9f 77       	andi	r25, 0x7F	; 127
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
 2a0:	80 e4       	ldi	r24, 0x40	; 64
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	3a 81       	ldd	r19, Y+2	; 0x02
 2a8:	23 2f       	mov	r18, r19
 2aa:	33 27       	eor	r19, r19
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
    UBRRL = (unsigned char) baudrate;
 2b0:	89 e2       	ldi	r24, 0x29	; 41
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	29 81       	ldd	r18, Y+1	; 0x01
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 2ba:	8a e2       	ldi	r24, 0x2A	; 42
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	28 e9       	ldi	r18, 0x98	; 152
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 2c4:	80 e4       	ldi	r24, 0x40	; 64
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	26 e8       	ldi	r18, 0x86	; 134
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <uart_getc>:
Purpose:  return byte from ringbuffer
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <uart_getc+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2e2:	90 91 a8 00 	lds	r25, 0x00A8
 2e6:	80 91 a9 00 	lds	r24, 0x00A9
 2ea:	98 17       	cp	r25, r24
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <uart_getc+0x1c>
        return UART_NO_DATA;   /* no data available */
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	17 c0       	rjmp	.+46     	; 0x322 <uart_getc+0x4a>
    }

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2f4:	80 91 a9 00 	lds	r24, 0x00A9
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	8f 71       	andi	r24, 0x1F	; 31
 2fc:	89 83       	std	Y+1, r24	; 0x01
    UART_RxTail = tmptail;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	80 93 a9 00 	sts	0x00A9, r24

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	8a 57       	subi	r24, 0x7A	; 122
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	8a 83       	std	Y+2, r24	; 0x02

    data = (UART_LastRxError << 8) + data;
 314:	80 91 aa 00 	lds	r24, 0x00AA
    UART_LastRxError = 0;
 318:	10 92 aa 00 	sts	0x00AA, r1
    return data;
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0

}/* uart_getc */
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none
**************************************************************************/
void uart_putc(unsigned char data)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <uart_putc+0x6>
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;


    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 338:	80 91 a6 00 	lds	r24, 0x00A6
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	8f 71       	andi	r24, 0x1F	; 31
 340:	89 83       	std	Y+1, r24	; 0x01

    while ( tmphead == UART_TxTail ){
 342:	00 00       	nop
 344:	80 91 a7 00 	lds	r24, 0x00A7
 348:	99 81       	ldd	r25, Y+1	; 0x01
 34a:	98 17       	cp	r25, r24
 34c:	d9 f3       	breq	.-10     	; 0x344 <uart_putc+0x18>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	8a 59       	subi	r24, 0x9A	; 154
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	2a 81       	ldd	r18, Y+2	; 0x02
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	80 93 a6 00 	sts	0x00A6, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 364:	8a e2       	ldi	r24, 0x2A	; 42
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	2a e2       	ldi	r18, 0x2A	; 42
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	20 62       	ori	r18, 0x20	; 32
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18

}/* uart_putc */
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <uart_puts+0x6>
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	9a 83       	std	Y+2, r25	; 0x02
 38c:	89 83       	std	Y+1, r24	; 0x01
    while (*s)
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <uart_puts+0x28>
      uart_putc(*s++);
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	fc 01       	movw	r30, r24
 396:	80 81       	ld	r24, Z
 398:	28 2f       	mov	r18, r24
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
 3a4:	82 2f       	mov	r24, r18
 3a6:	c2 df       	rcall	.-124    	; 0x32c <uart_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s)
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	88 23       	and	r24, r24
 3b2:	71 f7       	brne	.-36     	; 0x390 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	00 d0       	rcall	.+0      	; 0x3c6 <uart_puts_p+0x8>
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <uart_puts_p+0xa>
 3c8:	0f 92       	push	r0
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	9d 83       	std	Y+5, r25	; 0x05
 3d0:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <uart_puts_p+0x1a>
      uart_putc(c);
 3d4:	81 2f       	mov	r24, r17
 3d6:	aa df       	rcall	.-172    	; 0x32c <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 3d8:	8c 81       	ldd	r24, Y+4	; 0x04
 3da:	9d 81       	ldd	r25, Y+5	; 0x05
 3dc:	9a 83       	std	Y+2, r25	; 0x02
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	9d 81       	ldd	r25, Y+5	; 0x05
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	9d 83       	std	Y+5, r25	; 0x05
 3e8:	8c 83       	std	Y+4, r24	; 0x04
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
 3ee:	fc 01       	movw	r30, r24
 3f0:	14 91       	lpm	r17, Z
 3f2:	1b 83       	std	Y+3, r17	; 0x03
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	18 2f       	mov	r17, r24
 3f8:	11 23       	and	r17, r17
 3fa:	61 f7       	brne	.-40     	; 0x3d4 <uart_puts_p+0x16>
      uart_putc(c);

}/* uart_puts_p */
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	08 95       	ret

0000040e <get_UART_RxBuf>:

unsigned char* get_UART_RxBuf(){
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62

    RxBuf_pnt=UART_RxBuf;
 416:	86 e8       	ldi	r24, 0x86	; 134
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 65 00 	sts	0x0065, r25
 41e:	80 93 64 00 	sts	0x0064, r24
    return RxBuf_pnt;
 422:	80 91 64 00 	lds	r24, 0x0064
 426:	90 91 65 00 	lds	r25, 0x0065

}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <strstr_P>:
 430:	fb 01       	movw	r30, r22
 432:	55 91       	lpm	r21, Z+
 434:	55 23       	and	r21, r21
 436:	a9 f0       	breq	.+42     	; 0x462 <__stack+0x3>
 438:	bf 01       	movw	r22, r30
 43a:	dc 01       	movw	r26, r24
 43c:	4d 91       	ld	r20, X+
 43e:	45 17       	cp	r20, r21
 440:	41 11       	cpse	r20, r1
 442:	e1 f7       	brne	.-8      	; 0x43c <strstr_P+0xc>
 444:	59 f4       	brne	.+22     	; 0x45c <strstr_P+0x2c>
 446:	cd 01       	movw	r24, r26
 448:	05 90       	lpm	r0, Z+
 44a:	00 20       	and	r0, r0
 44c:	49 f0       	breq	.+18     	; 0x460 <__stack+0x1>
 44e:	4d 91       	ld	r20, X+
 450:	40 15       	cp	r20, r0
 452:	41 11       	cpse	r20, r1
 454:	c9 f3       	breq	.-14     	; 0x448 <strstr_P+0x18>
 456:	fb 01       	movw	r30, r22
 458:	41 11       	cpse	r20, r1
 45a:	ef cf       	rjmp	.-34     	; 0x43a <strstr_P+0xa>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>


bin/Debug/UARTlibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000040c  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800064  00800064  000004a4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000461  00000000  00000000  00000c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a0  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c0  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000310  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000125e9  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
   2:	4f c0       	rjmp	.+158    	; 0xa2 <__bad_interrupt>
   4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
   6:	4d c0       	rjmp	.+154    	; 0xa2 <__bad_interrupt>
   8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
   a:	4b c0       	rjmp	.+150    	; 0xa2 <__bad_interrupt>
   c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
   e:	49 c0       	rjmp	.+146    	; 0xa2 <__bad_interrupt>
  10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
  12:	47 c0       	rjmp	.+142    	; 0xa2 <__bad_interrupt>
  14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
  16:	7f c0       	rjmp	.+254    	; 0x116 <__vector_11>
  18:	c8 c0       	rjmp	.+400    	; 0x1aa <__vector_12>
  1a:	43 c0       	rjmp	.+134    	; 0xa2 <__bad_interrupt>
  1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
  1e:	41 c0       	rjmp	.+130    	; 0xa2 <__bad_interrupt>
  20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
  22:	3f c0       	rjmp	.+126    	; 0xa2 <__bad_interrupt>
  24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>

00000026 <ATcheck>:
  26:	41 54 00                                            AT.

00000029 <AT_OK>:
  29:	4f 4b 00                                            OK.

0000002c <__c.2171>:
  2c:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  3c:	3a 20 00                                            : .

0000003f <__c.2173>:
  3f:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  4f:	6f 72 3a 20 00                                      or: .

00000054 <__c.2175>:
  54:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  64:	65 72 72 6f 72 3a 20 00                             error: .

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a0 e6       	ldi	r26, 0x60	; 96
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	ec e0       	ldi	r30, 0x0C	; 12
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a4 36       	cpi	r26, 0x64	; 100
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a4 e6       	ldi	r26, 0x64	; 100
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a9 3a       	cpi	r26, 0xA9	; 169
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	02 d0       	rcall	.+4      	; 0xa4 <main>
  a0:	b3 c1       	rjmp	.+870    	; 0x408 <_exit>

000000a2 <__bad_interrupt>:
  a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <main>:

uint8_t check_at_answ();


int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
     *  with the macro
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	bc d0       	rcall	.+376    	; 0x22c <uart_init>

    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
  b4:	78 94       	sei


    /*
     * Transmit string from program memory to UART
     */
    uart_puts_p(ATcheck);
  b6:	86 e2       	ldi	r24, 0x26	; 38
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	64 d1       	rcall	.+712    	; 0x384 <uart_puts_p>
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x1c>
            if(strstr_P("OK", AT_OK)){
           // uart_putc(UART_RxBuf[3]);
            }

        }
    }
  be:	00 00       	nop
         * uart_getc() returns in the lower byte the received character and
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
  c0:	ee d0       	rcall	.+476    	; 0x29e <uart_getc>
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
        if ( c & UART_NO_DATA )
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 70       	andi	r24, 0x00	; 0
  cc:	91 70       	andi	r25, 0x01	; 1
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	b1 f7       	brne	.-20     	; 0xbe <main+0x1a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	9a 81       	ldd	r25, Y+2	; 0x02
  d6:	80 70       	andi	r24, 0x00	; 0
  d8:	90 71       	andi	r25, 0x10	; 16
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	19 f0       	breq	.+6      	; 0xe4 <main+0x40>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	50 d1       	rcall	.+672    	; 0x384 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	80 70       	andi	r24, 0x00	; 0
  ea:	98 70       	andi	r25, 0x08	; 8
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	19 f0       	breq	.+6      	; 0xf6 <main+0x52>
                /*
                 * Overrun, a character already present in the UART UDR register was
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	47 d1       	rcall	.+654    	; 0x384 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	80 70       	andi	r24, 0x00	; 0
  fc:	92 70       	andi	r25, 0x02	; 2
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	19 f0       	breq	.+6      	; 0x108 <main+0x64>
            {
                /*
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped
                 */
                uart_puts_P("Buffer overflow error: ");
 102:	84 e5       	ldi	r24, 0x54	; 84
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	3e d1       	rcall	.+636    	; 0x384 <uart_puts_p>
            }
            /*
             * send received character back
             */
            // UART_RxBuf[0]=0x30;
            if(strstr_P("OK", AT_OK)){
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	29 e2       	ldi	r18, 0x29	; 41
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	60 d1       	rcall	.+704    	; 0x3d4 <strstr_P>
           // uart_putc(UART_RxBuf[3]);
            }

        }
    }
 114:	d4 cf       	rjmp	.-88     	; 0xbe <main+0x1a>

00000116 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <__vector_11+0x1a>
 130:	00 d0       	rcall	.+0      	; 0x132 <__vector_11+0x1c>
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
 140:	8c e2       	ldi	r24, 0x2C	; 44
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	88 71       	andi	r24, 0x18	; 24
 14e:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 150:	80 91 a6 00 	lds	r24, 0x00A6
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	8f 71       	andi	r24, 0x1F	; 31
 158:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
 15a:	80 91 a7 00 	lds	r24, 0x00A7
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	98 17       	cp	r25, r24
 162:	19 f4       	brne	.+6      	; 0x16a <__vector_11+0x54>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	0b c0       	rjmp	.+22     	; 0x180 <__vector_11+0x6a>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	80 93 a6 00 	sts	0x00A6, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 170:	8c 81       	ldd	r24, Y+4	; 0x04
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	8c 59       	subi	r24, 0x9C	; 156
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	2b 81       	ldd	r18, Y+3	; 0x03
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
    }
    UART_LastRxError |= lastRxError;   
 180:	90 91 a8 00 	lds	r25, 0x00A8
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	89 2b       	or	r24, r25
 188:	80 93 a8 00 	sts	0x00A8, r24
}
 18c:	24 96       	adiw	r28, 0x04	; 4
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	0f 92       	push	r0
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1ca:	90 91 a4 00 	lds	r25, 0x00A4
 1ce:	80 91 a5 00 	lds	r24, 0x00A5
 1d2:	98 17       	cp	r25, r24
 1d4:	a1 f0       	breq	.+40     	; 0x1fe <__vector_12+0x54>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1d6:	80 91 a5 00 	lds	r24, 0x00A5
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	8f 71       	andi	r24, 0x1F	; 31
 1de:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	80 93 a5 00 	sts	0x00A5, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 1e6:	8c e2       	ldi	r24, 0x2C	; 44
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	22 2f       	mov	r18, r18
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	2c 57       	subi	r18, 0x7C	; 124
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <__vector_12+0x66>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 1fe:	8a e2       	ldi	r24, 0x2A	; 42
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2a e2       	ldi	r18, 0x2A	; 42
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	2f 7d       	andi	r18, 0xDF	; 223
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
    }
}
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <uart_init+0x6>
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
 23a:	10 92 a4 00 	sts	0x00A4, r1
    UART_TxTail = 0;
 23e:	10 92 a5 00 	sts	0x00A5, r1
    UART_RxHead = 0;
 242:	10 92 a6 00 	sts	0x00A6, r1
    UART_RxTail = 0;
 246:	10 92 a7 00 	sts	0x00A7, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	99 23       	and	r25, r25
 250:	54 f4       	brge	.+20     	; 0x266 <uart_init+0x3a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	22 e0       	ldi	r18, 0x02	; 2
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
    	 baudrate &= ~0x8000;
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	9a 81       	ldd	r25, Y+2	; 0x02
 260:	9f 77       	andi	r25, 0x7F	; 127
 262:	9a 83       	std	Y+2, r25	; 0x02
 264:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	3a 81       	ldd	r19, Y+2	; 0x02
 26e:	23 2f       	mov	r18, r19
 270:	33 27       	eor	r19, r19
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
    UBRRL = (unsigned char) baudrate;
 276:	89 e2       	ldi	r24, 0x29	; 41
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 280:	8a e2       	ldi	r24, 0x2A	; 42
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	28 e9       	ldi	r18, 0x98	; 152
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 28a:	80 e4       	ldi	r24, 0x40	; 64
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	26 e8       	ldi	r18, 0x86	; 134
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <uart_getc+0x6>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2a8:	90 91 a6 00 	lds	r25, 0x00A6
 2ac:	80 91 a7 00 	lds	r24, 0x00A7
 2b0:	98 17       	cp	r25, r24
 2b2:	19 f4       	brne	.+6      	; 0x2ba <uart_getc+0x1c>
        return UART_NO_DATA;   /* no data available */
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <uart_getc+0x4a>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2ba:	80 91 a7 00 	lds	r24, 0x00A7
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	8f 71       	andi	r24, 0x1F	; 31
 2c2:	89 83       	std	Y+1, r24	; 0x01
    UART_RxTail = tmptail; 
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	80 93 a7 00 	sts	0x00A7, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	8c 59       	subi	r24, 0x9C	; 156
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	fc 01       	movw	r30, r24
 2d6:	80 81       	ld	r24, Z
 2d8:	8a 83       	std	Y+2, r24	; 0x02
    
    data = (UART_LastRxError << 8) + data;
 2da:	80 91 a8 00 	lds	r24, 0x00A8
    UART_LastRxError = 0;
 2de:	10 92 a8 00 	sts	0x00A8, r1
    return data;
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0

}/* uart_getc */
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <uart_putc+0x6>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2fe:	80 91 a4 00 	lds	r24, 0x00A4
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	8f 71       	andi	r24, 0x1F	; 31
 306:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
 308:	00 00       	nop
 30a:	80 91 a5 00 	lds	r24, 0x00A5
 30e:	99 81       	ldd	r25, Y+1	; 0x01
 310:	98 17       	cp	r25, r24
 312:	d9 f3       	breq	.-10     	; 0x30a <uart_putc+0x18>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	8c 57       	subi	r24, 0x7C	; 124
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	2a 81       	ldd	r18, Y+2	; 0x02
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	80 93 a4 00 	sts	0x00A4, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 32a:	8a e2       	ldi	r24, 0x2A	; 42
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	2a e2       	ldi	r18, 0x2A	; 42
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	f9 01       	movw	r30, r18
 334:	20 81       	ld	r18, Z
 336:	20 62       	ori	r18, 0x20	; 32
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18

}/* uart_putc */
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <uart_puts+0x6>
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	9a 83       	std	Y+2, r25	; 0x02
 352:	89 83       	std	Y+1, r24	; 0x01
    while (*s) 
 354:	0c c0       	rjmp	.+24     	; 0x36e <uart_puts+0x28>
      uart_putc(*s++);
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	28 2f       	mov	r18, r24
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	82 2f       	mov	r24, r18
 36c:	c2 df       	rcall	.-124    	; 0x2f2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	fc 01       	movw	r30, r24
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	71 f7       	brne	.-36     	; 0x356 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <uart_puts_p+0x8>
 38c:	00 d0       	rcall	.+0      	; 0x38e <uart_puts_p+0xa>
 38e:	0f 92       	push	r0
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	9d 83       	std	Y+5, r25	; 0x05
 396:	8c 83       	std	Y+4, r24	; 0x04
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 398:	02 c0       	rjmp	.+4      	; 0x39e <uart_puts_p+0x1a>
      uart_putc(c);
 39a:	81 2f       	mov	r24, r17
 39c:	aa df       	rcall	.-172    	; 0x2f2 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	9a 83       	std	Y+2, r25	; 0x02
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	9d 81       	ldd	r25, Y+5	; 0x05
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	9d 83       	std	Y+5, r25	; 0x05
 3ae:	8c 83       	std	Y+4, r24	; 0x04
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	fc 01       	movw	r30, r24
 3b6:	14 91       	lpm	r17, Z
 3b8:	1b 83       	std	Y+3, r17	; 0x03
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	18 2f       	mov	r17, r24
 3be:	11 23       	and	r17, r17
 3c0:	61 f7       	brne	.-40     	; 0x39a <uart_puts_p+0x16>
      uart_putc(c);

}/* uart_puts_p */
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	08 95       	ret

000003d4 <strstr_P>:
 3d4:	fb 01       	movw	r30, r22
 3d6:	55 91       	lpm	r21, Z+
 3d8:	55 23       	and	r21, r21
 3da:	a9 f0       	breq	.+42     	; 0x406 <strstr_P+0x32>
 3dc:	bf 01       	movw	r22, r30
 3de:	dc 01       	movw	r26, r24
 3e0:	4d 91       	ld	r20, X+
 3e2:	45 17       	cp	r20, r21
 3e4:	41 11       	cpse	r20, r1
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <strstr_P+0xc>
 3e8:	59 f4       	brne	.+22     	; 0x400 <strstr_P+0x2c>
 3ea:	cd 01       	movw	r24, r26
 3ec:	05 90       	lpm	r0, Z+
 3ee:	00 20       	and	r0, r0
 3f0:	49 f0       	breq	.+18     	; 0x404 <strstr_P+0x30>
 3f2:	4d 91       	ld	r20, X+
 3f4:	40 15       	cp	r20, r0
 3f6:	41 11       	cpse	r20, r1
 3f8:	c9 f3       	breq	.-14     	; 0x3ec <strstr_P+0x18>
 3fa:	fb 01       	movw	r30, r22
 3fc:	41 11       	cpse	r20, r1
 3fe:	ef cf       	rjmp	.-34     	; 0x3de <strstr_P+0xa>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>

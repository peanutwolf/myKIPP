
bin/Debug/UARTlibTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  00000326  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b1  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000299  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000616  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000238  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034a  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000150bb  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00017081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	2f c0       	rjmp	.+94     	; 0x62 <__bad_interrupt>
   4:	2e c0       	rjmp	.+92     	; 0x62 <__bad_interrupt>
   6:	2d c0       	rjmp	.+90     	; 0x62 <__bad_interrupt>
   8:	2c c0       	rjmp	.+88     	; 0x62 <__bad_interrupt>
   a:	2b c0       	rjmp	.+86     	; 0x62 <__bad_interrupt>
   c:	2a c0       	rjmp	.+84     	; 0x62 <__bad_interrupt>
   e:	29 c0       	rjmp	.+82     	; 0x62 <__bad_interrupt>
  10:	28 c0       	rjmp	.+80     	; 0x62 <__bad_interrupt>
  12:	27 c0       	rjmp	.+78     	; 0x62 <__bad_interrupt>
  14:	26 c0       	rjmp	.+76     	; 0x62 <__bad_interrupt>
  16:	5d c0       	rjmp	.+186    	; 0xd2 <__vector_11>
  18:	8c c0       	rjmp	.+280    	; 0x132 <__vector_12>
  1a:	23 c0       	rjmp	.+70     	; 0x62 <__bad_interrupt>
  1c:	22 c0       	rjmp	.+68     	; 0x62 <__bad_interrupt>
  1e:	21 c0       	rjmp	.+66     	; 0x62 <__bad_interrupt>
  20:	20 c0       	rjmp	.+64     	; 0x62 <__bad_interrupt>
  22:	1f c0       	rjmp	.+62     	; 0x62 <__bad_interrupt>
  24:	1e c0       	rjmp	.+60     	; 0x62 <__bad_interrupt>

00000026 <AT_OK>:
  26:	4f 4b 00                                            OK.

00000029 <ATcheck>:
  29:	41 54 00                                            AT.

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf e5       	ldi	r28, 0x5F	; 95
  32:	d4 e0       	ldi	r29, 0x04	; 4
  34:	de bf       	out	0x3e, r29	; 62
  36:	cd bf       	out	0x3d, r28	; 61

00000038 <__do_copy_data>:
  38:	10 e0       	ldi	r17, 0x00	; 0
  3a:	a0 e6       	ldi	r26, 0x60	; 96
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	e2 e9       	ldi	r30, 0x92	; 146
  40:	f2 e0       	ldi	r31, 0x02	; 2
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	05 90       	lpm	r0, Z+
  46:	0d 92       	st	X+, r0
  48:	a0 36       	cpi	r26, 0x60	; 96
  4a:	b1 07       	cpc	r27, r17
  4c:	d9 f7       	brne	.-10     	; 0x44 <__SREG__+0x5>

0000004e <__do_clear_bss>:
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	a0 e6       	ldi	r26, 0x60	; 96
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	01 c0       	rjmp	.+2      	; 0x58 <.do_clear_bss_start>

00000056 <.do_clear_bss_loop>:
  56:	1d 92       	st	X+, r1

00000058 <.do_clear_bss_start>:
  58:	a1 3b       	cpi	r26, 0xB1	; 177
  5a:	b1 07       	cpc	r27, r17
  5c:	e1 f7       	brne	.-8      	; 0x56 <.do_clear_bss_loop>
  5e:	02 d0       	rcall	.+4      	; 0x64 <main>
  60:	16 c1       	rjmp	.+556    	; 0x28e <_exit>

00000062 <__bad_interrupt>:
  62:	ce cf       	rjmp	.-100    	; 0x0 <__vectors>

00000064 <main>:
     *  with the macro
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  64:	83 e3       	ldi	r24, 0x33	; 51
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	8a d0       	rcall	.+276    	; 0x17e <uart_init>

    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
  6a:	78 94       	sei
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_p(ATcheck);
  6c:	89 e2       	ldi	r24, 0x29	; 41
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	d3 d0       	rcall	.+422    	; 0x218 <uart_puts_p>

DDRB=0x00;
  72:	17 ba       	out	0x17, r1	; 23

 for(;;)
 {
     PORTB=0x01;
  74:	d1 e0       	ldi	r29, 0x01	; 1

    else{
      _delay_ms(5000);
      uint8_t i=0;
        while((c=uart_getc())){
          tmpdata[i]=c;
  76:	07 ea       	ldi	r16, 0xA7	; 167
  78:	10 e0       	ldi	r17, 0x00	; 0
          i++;
        }
          if(strstr_P((const char *)tmpdata, AT_OK)){
  7a:	0f 2e       	mov	r0, r31
  7c:	f6 e2       	ldi	r31, 0x26	; 38
  7e:	ef 2e       	mov	r14, r31
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	ff 2e       	mov	r15, r31
  84:	f0 2d       	mov	r31, r0

DDRB=0x00;

 for(;;)
 {
     PORTB=0x01;
  86:	d8 bb       	out	0x18, r29	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	9f e3       	ldi	r25, 0x3F	; 63
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x28>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x2e>
    _delay_ms(30000);
    PORTB=0x00;
  92:	18 ba       	out	0x18, r1	; 24
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	9f e3       	ldi	r25, 0x3F	; 63
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x34>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x3a>
    _delay_ms(30000);
    if (!isEmpty_RxBuf() ) {
  9e:	d4 d0       	rcall	.+424    	; 0x248 <isEmpty_RxBuf>
  a0:	88 23       	and	r24, r24
  a2:	89 f3       	breq	.-30     	; 0x86 <main+0x22>
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	9f e3       	ldi	r25, 0x3F	; 63
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x44>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x4a>
       // No DATA, empty cycle
    }

    else{
      _delay_ms(5000);
      uint8_t i=0;
  ae:	c0 e0       	ldi	r28, 0x00	; 0
        while((c=uart_getc())){
  b0:	05 c0       	rjmp	.+10     	; 0xbc <main+0x58>
          tmpdata[i]=c;
  b2:	f8 01       	movw	r30, r16
  b4:	ec 0f       	add	r30, r28
  b6:	f1 1d       	adc	r31, r1
  b8:	80 83       	st	Z, r24
          i++;
  ba:	cf 5f       	subi	r28, 0xFF	; 255
    }

    else{
      _delay_ms(5000);
      uint8_t i=0;
        while((c=uart_getc())){
  bc:	74 d0       	rcall	.+232    	; 0x1a6 <uart_getc>
  be:	88 23       	and	r24, r24
  c0:	c1 f7       	brne	.-16     	; 0xb2 <main+0x4e>
          tmpdata[i]=c;
          i++;
        }
          if(strstr_P((const char *)tmpdata, AT_OK)){
  c2:	c8 01       	movw	r24, r16
  c4:	b7 01       	movw	r22, r14
  c6:	c9 d0       	rcall	.+402    	; 0x25a <strstr_P>
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	e9 f2       	breq	.-70     	; 0x86 <main+0x22>
               uart_puts((const char*)tmpdata);
  cc:	c8 01       	movw	r24, r16
  ce:	96 d0       	rcall	.+300    	; 0x1fc <uart_puts>
  d0:	da cf       	rjmp	.-76     	; 0x86 <main+0x22>

000000d2 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
  e8:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
  ea:	3c b1       	in	r19, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  ec:	80 91 62 00 	lds	r24, 0x0062
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	8f 71       	andi	r24, 0x1F	; 31

    if ( tmphead == UART_RxTail ) {
  f4:	90 91 61 00 	lds	r25, 0x0061
  f8:	89 17       	cp	r24, r25
  fa:	49 f0       	breq	.+18     	; 0x10e <__vector_11+0x3c>

    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  fc:	28 71       	andi	r18, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  fe:	80 93 62 00 	sts	0x0062, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 102:	e5 e6       	ldi	r30, 0x65	; 101
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e8 0f       	add	r30, r24
 108:	f1 1d       	adc	r31, r1
 10a:	30 83       	st	Z, r19
 10c:	01 c0       	rjmp	.+2      	; 0x110 <__vector_11+0x3e>
    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 10e:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 110:	90 91 60 00 	lds	r25, 0x0060
 114:	82 2f       	mov	r24, r18
 116:	89 2b       	or	r24, r25
 118:	80 93 60 00 	sts	0x0060, r24
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
    unsigned char tmptail;


    if ( UART_TxHead != UART_TxTail) {
 144:	90 91 64 00 	lds	r25, 0x0064
 148:	80 91 63 00 	lds	r24, 0x0063
 14c:	98 17       	cp	r25, r24
 14e:	69 f0       	breq	.+26     	; 0x16a <__vector_12+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 150:	80 91 63 00 	lds	r24, 0x0063
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
 158:	80 93 63 00 	sts	0x0063, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 15c:	e5 e8       	ldi	r30, 0x85	; 133
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e8 0f       	add	r30, r24
 162:	f1 1d       	adc	r31, r1
 164:	80 81       	ld	r24, Z
 166:	8c b9       	out	0x0c, r24	; 12
 168:	01 c0       	rjmp	.+2      	; 0x16c <__vector_12+0x3a>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 16a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 17e:	10 92 64 00 	sts	0x0064, r1
    UART_TxTail = 0;
 182:	10 92 63 00 	sts	0x0063, r1
    UART_RxHead = 0;
 186:	10 92 62 00 	sts	0x0062, r1
    UART_RxTail = 0;
 18a:	10 92 61 00 	sts	0x0061, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 18e:	99 23       	and	r25, r25
 190:	1c f4       	brge	.+6      	; 0x198 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed
 192:	22 e0       	ldi	r18, 0x02	; 2
 194:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 196:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 198:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 19a:	89 b9       	out	0x09, r24	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 19c:	88 e9       	ldi	r24, 0x98	; 152
 19e:	8a b9       	out	0x0a, r24	; 10

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1a0:	86 e8       	ldi	r24, 0x86	; 134
 1a2:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 1a4:	08 95       	ret

000001a6 <uart_getc>:
{
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 1a6:	90 91 62 00 	lds	r25, 0x0062
 1aa:	80 91 61 00 	lds	r24, 0x0061
 1ae:	98 17       	cp	r25, r24
 1b0:	89 f0       	breq	.+34     	; 0x1d4 <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1b2:	80 91 61 00 	lds	r24, 0x0061
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	8f 71       	andi	r24, 0x1F	; 31
    UART_RxTail = tmptail;
 1ba:	80 93 61 00 	sts	0x0061, r24

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1be:	e5 e6       	ldi	r30, 0x65	; 101
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e8 0f       	add	r30, r24
 1c4:	f1 1d       	adc	r31, r1
 1c6:	80 81       	ld	r24, Z

    data = (UART_LastRxError << 8) + data;
 1c8:	90 91 60 00 	lds	r25, 0x0060
    UART_LastRxError = 0;
 1cc:	10 92 60 00 	sts	0x0060, r1
    return data;
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1

    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 1d8:	08 95       	ret

000001da <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1da:	20 91 64 00 	lds	r18, 0x0064
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	2f 71       	andi	r18, 0x1F	; 31

    while ( tmphead == UART_TxTail ){
 1e2:	90 91 63 00 	lds	r25, 0x0063
 1e6:	29 17       	cp	r18, r25
 1e8:	e1 f3       	breq	.-8      	; 0x1e2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 1ea:	e5 e8       	ldi	r30, 0x85	; 133
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e2 0f       	add	r30, r18
 1f0:	f1 1d       	adc	r31, r1
 1f2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1f4:	20 93 64 00 	sts	0x0064, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1f8:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 1fa:	08 95       	ret

000001fc <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
    while (*s)
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <uart_puts+0x16>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
 208:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s)
      uart_putc(*s++);
 20a:	e7 df       	rcall	.-50     	; 0x1da <uart_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s)
 20c:	89 91       	ld	r24, Y+
 20e:	88 23       	and	r24, r24
 210:	e1 f7       	brne	.-8      	; 0x20a <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 21e:	fc 01       	movw	r30, r24
 220:	84 91       	lpm	r24, Z
 222:	88 23       	and	r24, r24
 224:	39 f0       	breq	.+14     	; 0x234 <uart_puts_p+0x1c>
 226:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 228:	d8 df       	rcall	.-80     	; 0x1da <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 22a:	fe 01       	movw	r30, r28
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	84 91       	lpm	r24, Z
 230:	88 23       	and	r24, r24
 232:	d1 f7       	brne	.-12     	; 0x228 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <get_UART_RxBuf>:

unsigned char* get_UART_RxBuf(){

    RxBuf_pnt=UART_RxBuf;
 23a:	85 e6       	ldi	r24, 0x65	; 101
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 a6 00 	sts	0x00A6, r25
 242:	80 93 a5 00 	sts	0x00A5, r24
    return RxBuf_pnt;

}
 246:	08 95       	ret

00000248 <isEmpty_RxBuf>:

uint8_t isEmpty_RxBuf(){

     if ( UART_RxHead == UART_RxTail ) {
 248:	20 91 62 00 	lds	r18, 0x0062
 24c:	90 91 61 00 	lds	r25, 0x0061
        return 0x00;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	29 17       	cp	r18, r25
 254:	09 f4       	brne	.+2      	; 0x258 <isEmpty_RxBuf+0x10>
 256:	80 e0       	ldi	r24, 0x00	; 0
     }

     else{
        return 0x01;
     }
}
 258:	08 95       	ret

0000025a <strstr_P>:
 25a:	fb 01       	movw	r30, r22
 25c:	55 91       	lpm	r21, Z+
 25e:	55 23       	and	r21, r21
 260:	a9 f0       	breq	.+42     	; 0x28c <strstr_P+0x32>
 262:	bf 01       	movw	r22, r30
 264:	dc 01       	movw	r26, r24
 266:	4d 91       	ld	r20, X+
 268:	45 17       	cp	r20, r21
 26a:	41 11       	cpse	r20, r1
 26c:	e1 f7       	brne	.-8      	; 0x266 <strstr_P+0xc>
 26e:	59 f4       	brne	.+22     	; 0x286 <strstr_P+0x2c>
 270:	cd 01       	movw	r24, r26
 272:	05 90       	lpm	r0, Z+
 274:	00 20       	and	r0, r0
 276:	49 f0       	breq	.+18     	; 0x28a <strstr_P+0x30>
 278:	4d 91       	ld	r20, X+
 27a:	40 15       	cp	r20, r0
 27c:	41 11       	cpse	r20, r1
 27e:	c9 f3       	breq	.-14     	; 0x272 <strstr_P+0x18>
 280:	fb 01       	movw	r30, r22
 282:	41 11       	cpse	r20, r1
 284:	ef cf       	rjmp	.-34     	; 0x264 <strstr_P+0xa>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>


bin/Debug/myKIPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  00800062  00800062  0000037a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000303  00000000  00000000  00000b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c6  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000149  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000378  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0000a9ad  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	33 c1       	rjmp	.+614    	; 0x27e <__vector_11>
  18:	eb c0       	rjmp	.+470    	; 0x1f0 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ee       	ldi	r30, 0xE4	; 228
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3c       	cpi	r26, 0xCA	; 202
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7c d0       	rcall	.+248    	; 0x152 <main>
  5a:	42 c1       	rjmp	.+644    	; 0x2e0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <buf_push_char>:
#include </home/peanutwolf/Документы/myKIPP/RingBuffer.h>

void buf_push_char(char data){
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	0f 92       	push	r0
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
  68:	89 83       	std	Y+1, r24	; 0x01
   if(buf_pointer<=90){
  6a:	80 91 c6 00 	lds	r24, 0x00C6
  6e:	8b 35       	cpi	r24, 0x5B	; 91
  70:	78 f4       	brcc	.+30     	; 0x90 <buf_push_char+0x32>
       RING_BUFFER[buf_pointer] = data;
  72:	80 91 c6 00 	lds	r24, 0x00C6
  76:	88 2f       	mov	r24, r24
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	8e 59       	subi	r24, 0x9E	; 158
  7c:	9f 4f       	sbci	r25, 0xFF	; 255
  7e:	29 81       	ldd	r18, Y+1	; 0x01
  80:	fc 01       	movw	r30, r24
  82:	20 83       	st	Z, r18
       buf_pointer++;
  84:	80 91 c6 00 	lds	r24, 0x00C6
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	80 93 c6 00 	sts	0x00C6, r24
  8e:	01 c0       	rjmp	.+2      	; 0x92 <buf_push_char+0x34>
   }
   else{
       return;
  90:	00 00       	nop
   }
}
  92:	0f 90       	pop	r0
  94:	df 91       	pop	r29
  96:	cf 91       	pop	r28
  98:	08 95       	ret

0000009a <buf_pop_char>:

char buf_pop_char(){
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  char data;
   if(!buf_isEmpty()){
  a4:	1a d0       	rcall	.+52     	; 0xda <buf_isEmpty>
  a6:	98 2f       	mov	r25, r24
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 27       	eor	r24, r25
  ac:	88 23       	and	r24, r24
  ae:	81 f0       	breq	.+32     	; 0xd0 <buf_pop_char+0x36>
      data=RING_BUFFER[buf_pointer];
  b0:	80 91 c6 00 	lds	r24, 0x00C6
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	8e 59       	subi	r24, 0x9E	; 158
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	80 81       	ld	r24, Z
  c0:	89 83       	std	Y+1, r24	; 0x01
      buf_pointer--;
  c2:	80 91 c6 00 	lds	r24, 0x00C6
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	80 93 c6 00 	sts	0x00C6, r24
      return data;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <buf_pop_char+0x38>
   }
   else{
      return 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
   }
}
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <buf_isEmpty>:

bool buf_isEmpty(){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
   if(buf_pointer==0){
  e2:	80 91 c6 00 	lds	r24, 0x00C6
  e6:	88 23       	and	r24, r24
  e8:	11 f4       	brne	.+4      	; 0xee <buf_isEmpty+0x14>
      return true;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <buf_isEmpty+0x16>
   }
   else{
      return false;
  ee:	80 e0       	ldi	r24, 0x00	; 0
   }

}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <writeSram>:

volatile char *sramAdress;
volatile uint8_t temp_pointer;
bool flag = true;

void writeSram(char data){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	0f 92       	push	r0
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	89 83       	std	Y+1, r24	; 0x01
    *sramAdress = data;
 102:	80 91 c8 00 	lds	r24, 0x00C8
 106:	90 91 c9 00 	lds	r25, 0x00C9
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
    sramAdress++;
 110:	80 91 c8 00 	lds	r24, 0x00C8
 114:	90 91 c9 00 	lds	r25, 0x00C9
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 c9 00 	sts	0x00C9, r25
 11e:	80 93 c8 00 	sts	0x00C8, r24
}
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <send_USART>:

void send_USART(){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
   temp_pointer = buf_pointer;
 132:	80 91 c6 00 	lds	r24, 0x00C6
 136:	80 93 c7 00 	sts	0x00C7, r24
   UCSRB |=_BV(UDRIE);
 13a:	8a e2       	ldi	r24, 0x2A	; 42
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2a e2       	ldi	r18, 0x2A	; 42
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	20 62       	ori	r18, 0x20	; 32
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <main>:

int main (void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
   UCSRB |= (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
 15a:	8a e2       	ldi	r24, 0x2A	; 42
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2a e2       	ldi	r18, 0x2A	; 42
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	28 61       	ori	r18, 0x18	; 24
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
   UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	26 68       	ori	r18, 0x86	; 134
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18

   UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	10 82       	st	Z, r1
   UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 186:	89 e2       	ldi	r24, 0x29	; 41
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	23 e3       	ldi	r18, 0x33	; 51
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18

   UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
 190:	8a e2       	ldi	r24, 0x2A	; 42
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	2a e2       	ldi	r18, 0x2A	; 42
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	20 68       	ori	r18, 0x80	; 128
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
   sramAdress= 0x66;
 1a2:	86 e6       	ldi	r24, 0x66	; 102
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 c9 00 	sts	0x00C9, r25
 1aa:	80 93 c8 00 	sts	0x00C8, r24

   sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 1ae:	78 94       	sei

   DDRC = 0b00000011;
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	23 e0       	ldi	r18, 0x03	; 3
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <main+0x6c>
     PORTC = 0x01;    // Do nothing - echoing is handled by the ISR instead of in the main loop
     if((buf_pointer>=5)&flag){
           flag=false;
           send_USART();
     }
   }
 1bc:	00 00       	nop

   DDRC = 0b00000011;

   for (;;) // Loop forever
   {
     PORTC = 0x01;    // Do nothing - echoing is handled by the ISR instead of in the main loop
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
     if((buf_pointer>=5)&flag){
 1c8:	20 91 c6 00 	lds	r18, 0x00C6
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	25 30       	cpi	r18, 0x05	; 5
 1d2:	10 f4       	brcc	.+4      	; 0x1d8 <main+0x86>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	20 91 60 00 	lds	r18, 0x0060
 1dc:	22 2f       	mov	r18, r18
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	82 23       	and	r24, r18
 1e2:	93 23       	and	r25, r19
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	51 f3       	breq	.-44     	; 0x1bc <main+0x6a>
           flag=false;
 1e8:	10 92 60 00 	sts	0x0060, r1
           send_USART();
 1ec:	9e df       	rcall	.-196    	; 0x12a <send_USART>
     }
   }
 1ee:	e6 cf       	rjmp	.-52     	; 0x1bc <main+0x6a>

000001f0 <__vector_12>:
}


ISR (USART_UDRE_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
    if(!buf_isEmpty()){
 21a:	5f df       	rcall	.-322    	; 0xda <buf_isEmpty>
 21c:	98 2f       	mov	r25, r24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	89 27       	eor	r24, r25
 222:	88 23       	and	r24, r24
 224:	81 f0       	breq	.+32     	; 0x246 <__vector_12+0x56>
    //    UDR = RING_BUFFER[temp_pointer];
    UDR = 0x40;
 226:	8c e2       	ldi	r24, 0x2C	; 44
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	20 e4       	ldi	r18, 0x40	; 64
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
        temp_pointer++;
 230:	80 91 c7 00 	lds	r24, 0x00C7
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 c7 00 	sts	0x00C7, r24
        buf_pointer--;
 23a:	80 91 c6 00 	lds	r24, 0x00C6
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	80 93 c6 00 	sts	0x00C6, r24
 244:	09 c0       	rjmp	.+18     	; 0x258 <__vector_12+0x68>
    }
    else{
        UCSRB &=~_BV(UDRIE);
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2a e2       	ldi	r18, 0x2A	; 42
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	2f 7d       	andi	r18, 0xDF	; 223
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
    }
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_11>:

ISR(USART_RXC_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	0f 92       	push	r0
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
   char ReceivedByte;
   ReceivedByte = UDR; // Fetch the received byte value into the variable "ByteReceived"
 2aa:	8c e2       	ldi	r24, 0x2C	; 44
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	89 83       	std	Y+1, r24	; 0x01
    buf_push_char(ReceivedByte);
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	d3 de       	rcall	.-602    	; 0x5e <buf_push_char>
    //UDR = 0x40;
}
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
